/**********************************************************************************
 * Copyright (c) 2016-2019 Julien Bernard, https://github.com/raplonu/MultiArray
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 **********************************************************************************/
#ifndef MA_LIB
#define MA_LIB

#include <ma_api/config.h>
#include <ma_api/type.h>
#include <ma_api/traits.h>
#include <ma_api/function.h>

#include <ma_api/container/Container.h>
#include <ma_api/container/SharedContainer.h>

#include <ma_api/range/LinearRange.h>
#include <ma_api/range/Range.h>

#include <ma_api/dimension/BasicShape.h>
#include <ma_api/dimension/MultiShape.h>

#include <ma_api/array/Array.h>
#include <ma_api/array/ArrayView.h>

#include <ma_api/data/DataContainer.h>

namespace ma
{
    using range::L;
    using range::A;

    using LShape = dimension::MultiShape<range::LinearRange>;
    using SShape = dimension::MultiShape<range::Range>;

    /**
     * @brief One dimension array unique owner container
     * 
     * @tparam T type of the underlying array
     * @tparam Allocator Allocator of the underlying array
     */
    template<typename T, typename Allocator = DefaultAlloc<T>>
    using BArray = array::Array<T, container::Container<T, Allocator>, dimension::BasicShape>;

    /**
     * @brief Multi linear dimension array unique owner container
     * 
     * @tparam T type of the underlying array
     * @tparam Allocator Allocator of the underlying array
     */
    template<typename T, typename Allocator = DefaultAlloc<T>>
    using MArray = array::Array<T, container::Container<T, Allocator>, LShape>;

    /**
     * @brief One dimension array multi owners container
     * 
     * @tparam T type of the underlying array
     * @tparam Allocator Allocator of the underlying array
     */
    template<typename T, typename Allocator = DefaultAlloc<T>>
    using BSharedArray = array::Array<T, container::SharedContainer<T, Allocator>, dimension::BasicShape>;

    /**
     * @brief Multi linear dimension array multi owners container
     * 
     * @tparam T type of the underlying array
     * @tparam Allocator Allocator of the underlying array
     */
    template<typename T, typename Allocator = DefaultAlloc<T>>
    using MSharedArray = array::Array<T, container::SharedContainer<T, Allocator>, LShape>;

    /**
     * @brief One dimension array view container
     * 
     * @tparam T type of the underlying array
     * @tparam Allocator Allocator of the underlying array
     */
    template<typename T, typename Allocator = DefaultAlloc<T>>
    using BArrayView = array::ArrayView<T, Allocator, dimension::BasicShape>;

    /**
     * @brief One dimension array view container
     * 
     * @tparam T type of the underlying array
     * @tparam Allocator Allocator of the underlying array
     */
    template<typename T, typename Allocator = DefaultAlloc<T>>
    using MArrayView = array::ArrayView<T, Allocator, LShape>;

}

#endif //MA_LIB